ðŸ“˜ C++ Concepts â€“ Theory Notes

1. Introduction to C++

Developed by Bjarne Stroustrup at Bell Labs (1983).

Extension of C language with OOP features.

Supports low-level programming + high-level abstraction.

2. Basic Concepts

Tokens â†’ Keywords, Identifiers, Literals, Operators, Separators.

Data Types â†’ Primitive (int, float), Derived (array, pointer), User-defined (struct, class).

Input/Output â†’ cin, cout (from <iostream>).

3. Control Structures

Decision Making â†’ if, if-else, switch.

Loops â†’ for, while, do-while.

Jump â†’ break, continue, return, goto.

4. Functions

Modular code â†’ reduces redundancy.

Types: Normal, Inline, Recursive.

Overloading â†’ Same function name with different parameters.

Default Arguments â†’ Values passed if not specified.

5. OOP Concepts

Class & Object â†’ Blueprint & instance.

Encapsulation â†’ Data hiding (private, public, protected).

Inheritance â†’ Reusability (Single, Multiple, Multilevel, Hybrid).

Polymorphism â†’ One name, many forms (Compile-time & Run-time).

Abstraction â†’ Hiding implementation, showing only features.

Friend Function â†’ Access private members.

6. Constructors & Destructors

Constructor â†’ Initializes object.

Types: Default, Parameterized, Copy.

Destructor â†’ Cleans up (starts with ~).

Overloading allowed (except destructor).

7. Inheritance in Detail

Modes: Public, Private, Protected.

Virtual Base Class â†’ Solves diamond problem.

8. Polymorphism

Compile-time â†’ Function overloading, Operator overloading.

Run-time â†’ Virtual functions.

Pure virtual function â†’ Makes class abstract.

VTable & VPtr â†’ Mechanism behind runtime polymorphism.

9. Memory Management

Pointers â†’ Variables storing addresses.

Dynamic memory â†’ new, delete.

Smart Pointers â†’ unique_ptr, shared_ptr, weak_ptr.

Prevents memory leaks & dangling pointers.

10. Templates

Function Template â†’ Generic functions.

Class Template â†’ Generic classes.

Template Specialization â†’ Custom behavior for specific types.

11. Exception Handling

try â€“ throw â€“ catch mechanism.

Handles runtime errors safely.

Supports multiple catch blocks.

Can define custom exceptions.

12. File Handling

Classes: ifstream, ofstream, fstream.

Modes: in, out, app, trunc, binary.

Supports read, write, append.

13. Advanced Concepts

Namespace â†’ Avoids name conflicts.

Type Casting â†’ static_cast, dynamic_cast, const_cast, reinterpret_cast.

Lambda Expressions â†’ Inline anonymous functions.

Move Semantics â†’ Improves efficiency with rvalue references.

14. Standard Template Library (STL)

Containers: vector, list, map, set, stack, queue.

Iterators: Access elements sequentially.

Algorithms: sort, search, etc.

Functors: Function objects.

15. Multithreading

Thread â†’ Smallest unit of execution.

Thread Library â†’ <thread>.

Synchronization â†’ Mutex, Locks, Condition variables.

Issues: Race condition, Deadlock.
